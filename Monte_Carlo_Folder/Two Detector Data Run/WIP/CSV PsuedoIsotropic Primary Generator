//
// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//
// $Id: B1PrimaryGeneratorAction.cc 94307 2015-11-11 13:42:46Z gcosmo $
//
/// \file B1PrimaryGeneratorAction.cc
/// \brief Implementation of the B1PrimaryGeneratorAction class

#include "B1PrimaryGeneratorAction.hh"

#include "G4LogicalVolumeStore.hh"
#include "G4LogicalVolume.hh"
#include "G4Box.hh"
#include "G4RunManager.hh"
#include "G4ParticleGun.hh"
#include "G4ParticleTable.hh"
#include "G4ParticleDefinition.hh"
#include "G4SystemOfUnits.hh"
#include "Randomize.hh" 
#include <cmath> 

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

B1PrimaryGeneratorAction::B1PrimaryGeneratorAction()
: G4VUserPrimaryGeneratorAction(),
  fParticleGun(0), 
  fEnvelopeBox(0)
{
  G4int n_particle = 1;
  fParticleGun  = new G4ParticleGun(n_particle);

  // default particle kinematic
  G4ParticleTable* particleTable = G4ParticleTable::GetParticleTable();
  G4String particleName;
  G4ParticleDefinition* particle
    = particleTable->FindParticle(particleName="gamma");
  fParticleGun->SetParticleDefinition(particle);
//   fParticleGun->SetParticleEnergy(662.*keV); 


// -------------------------------------------------------------


//Reading again from the geometry CSV, sub-optimal solution un till I know how to access variables from another class.
        std::ifstream file("CSV2.csv");

    // Check if the file is open
    if (!file.is_open()) {
        std::cerr << "Error opening the file!" << std::endl;
    }
    // Vector to store the data from the CSV file
    // Read the file line by line
    std::string line;
    while (std::getline(file, line)) {
        // Create a string stream from the line
        std::istringstream iss(line);

        // Vector to store the values of each row
        std::vector<std::string> row;

        // Read the values separated by commas
        std::string value;
        while (std::getline(iss, value, ',')) 
        {
            row.push_back(value);
        }
        // Add the row to the data vector
        pg_result.push_back(row);
    }

    // Close the file
    file.close();
    
using namespace std; 

// -------------------------------------------------------------

/*
    //looping through pg_result
    for(int i=0; i < int(pg_result.size()) ; i++)
        {
            std::cout << "In primary gen. Line "<<  i << ": " << " Index : " << pg_result[i][0] << " Size : " << pg_result[i][1] 
            << " X : " << pg_result[i][2] << " err x: " << pg_result[i][3] 
            << " Y : " << pg_result[i][4] << " err Y: " << pg_result[i][5] 
            << " Z : " << pg_result[i][6] << " err Z: " << pg_result[i][7] << std::endl;  
        } 
*/

    G4double prob_sum;   

//populates probability vector
    for(int i=0; i < int(pg_result.size()) ; i++)
    {
        G4double x = std::stod(pg_result[i][2]); 
        G4double y = std::stod(pg_result[i][4]); 
        G4double z = std::stod(pg_result[i][6]);
        
        G4ThreeVector detector_pos = G4ThreeVector(x * cm, y * cm, z * cm); 
        
        G4double polar_r = detector_pos.mag();  
        
        G4double detector_size = std::stod(pg_result[i][1]);  
        
        //Using solid angle to scale the photon intensities, adding to sum
        G4double prob = (detector_size)/(sqrt(2)*polar_r);  
        prob_vector.push_back(prob);
        prob_sum += prob;
        
}

    G4double norm = 1/(prob_sum); 

//scales probabilities and repopulates probability vector
    for(int i=0; i < int(prob_vector.size()) ; i++)
    {
        prob_vector[i] *= norm; 
        std::cout << "Scaled probability for detector " << i << " is " << prob_vector[i] << std::endl;
    } 
    
    std::cout << "" << std::endl;
     
    cumulative_prob.resize(prob_vector.size()); 
    detector_counts.resize(prob_vector.size());

//populates cumulative probability vector  
      for(int i=0; i < prob_vector.size(); i++)
      {
        cumulative_prob[i] = sumUpToIndex(prob_vector, prob_vector.size(), i);
        std::cout << "Cumulative probability " << i << " is " << cumulative_prob[i] << " " << std::endl;
      }

//populates anglular vector
    for(int i=0; i < int(pg_result.size()) ; i++)
    {
        G4double x = std::stod(pg_result[i][2]); 
        G4double y = std::stod(pg_result[i][4]); 
        G4double z = std::stod(pg_result[i][6]);
        
        G4ThreeVector detector_pos = G4ThreeVector(x * cm, y * cm, z * cm); 
        
        G4double detector_size = std::stod(pg_result[i][1]); 
        
        //calculating distance, polar and azimuthial angles for each detector
        G4double polar_r = detector_pos.mag(); 
        G4double theta = detector_pos.theta(); 
        G4double phi = detector_pos.phi();  
        
        //Using tan approximation to calculate an approximate angular deviation
        G4double theta_max = detector_size/polar_r;  
        G4double phi_max = theta_max;  
        
        //Randomly generating a polar and azimuthial angle within the deviation
        G4double r1 = G4UniformRand(); 
        G4double polarAngle = 0;
        G4double azimuthialAngle =0;    
        
        //storing all the values for theta, phi, theta_max and phi_max
        std::vector<G4double> angular_vector = {theta, phi, theta_max, phi_max};
        angular_vector_total.push_back(angular_vector);
    }



}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

B1PrimaryGeneratorAction::~B1PrimaryGeneratorAction()
{
  delete fParticleGun;
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

void B1PrimaryGeneratorAction::GeneratePrimaries(G4Event* anEvent)
{
  //this function is called at the begining of each event
  //

  // In order to avoid dependence of PrimaryGeneratorAction
  // on DetectorConstruction class we get Envelope volume
  // from G4LogicalVolumeStore.
//   std::cout << "" << std::endl;  
//   std::cout << "Starting generating primary" << std::endl;  
//   std::cout << "" << std::endl; 
  
  G4double XY = 1*cm;
  G4double Z = 0;

  G4double size = 1.0; 
  G4double x0 = size * XY * (G4UniformRand()-0.5);
  G4double y0 = size * XY * (G4UniformRand()-0.5);
  G4double z0 = -0.5 * Z;
  
  fParticleGun->SetParticlePosition(G4ThreeVector(x0,y0,z0)); 
  
  //Randomly generating a polar and azimuthial angle within the deviation
  G4double random = G4UniformRand(); 
  G4double polarAngle = 0;
  G4double azimuthialAngle =0;  
  
  
  for(int i = 0; i < cumulative_prob.size(); i++)
  {
        if(i==0)
        {
          if(random < cumulative_prob[i])   
          {
            //using theta and theta_max from detector 1 (index 0) to calculate the momentum polar angle
            polarAngle = angular_vector_total[i][0] + 2*(G4UniformRand()-0.5)*angular_vector_total[i][2];  
            //using phi and phi_max from detector 1 (index 0) to calculate the momentum azimuthial angle
            azimuthialAngle = angular_vector_total[i][1] + 2*(G4UniformRand()-0.5)*angular_vector_total[i][3];  
            
            // std::cout << "Particle directed at detector index " << i << std::endl;  
            // std::cout << "Detector is at theta, phi: " << angular_vector_total[i][0]*(180/M_PI) << ", " 
            // << angular_vector_total[i][1]*(180/M_PI) << " with theta_max, phi_max: " 
            // << angular_vector_total[i][2]*(180/M_PI)  << ", " << angular_vector_total[i][3]*(180/M_PI) << std::endl;
            // std::cout << "Particle has polar and azimuthial angle of : " << polarAngle*(180/M_PI) << ", " 
            // << azimuthialAngle*(180/M_PI) << std::endl; 
            
            detector_counts[i] += 1;
          } 
        } 
        if( (i > 0) && (i < int(cumulative_prob.size() - 1)) )
        {
            if( (random < cumulative_prob[i]) && (random >= cumulative_prob[i-1]) )
            {
                //using theta and theta_max from detector 1 (index 0) to calculate the momentum polar angle
                polarAngle = angular_vector_total[i][0] + 2*(G4UniformRand()-0.5)*angular_vector_total[i][2];  
                //using phi and phi_max from detector 1 (index 0) to calculate the momentum azimuthial angle
                azimuthialAngle = angular_vector_total[i][1] + 2*(G4UniformRand()-0.5)*angular_vector_total[i][3];  
                
                // std::cout << "Particle directed at detector index " << i << std::endl;  
                // std::cout << "Detector is at theta, phi: " << angular_vector_total[i][0]*(180/M_PI) << ", " 
                // << angular_vector_total[i][1]*(180/M_PI) << " with theta_max, phi_max: " 
                // << angular_vector_total[i][2]*(180/M_PI)  << ", " << angular_vector_total[i][3]*(180/M_PI) << std::endl;
                // std::cout << "Particle has polar and azimuthial angle of : " << polarAngle*(180/M_PI) << ", " 
                // << azimuthialAngle*(180/M_PI) << std::endl; 
                
                detector_counts[i] += 1;
            }
        } 
        if (i == int(cumulative_prob.size() - 1))
        {
            if(random >= cumulative_prob[i-1])
            {
                //using theta and theta_max from detector 1 (index 0) to calculate the momentum polar angle
                polarAngle = angular_vector_total[i][0] + 2*(G4UniformRand()-0.5)*angular_vector_total[i][2];  
                //using phi and phi_max from detector 1 (index 0) to calculate the momentum azimuthial angle
                azimuthialAngle = angular_vector_total[i][1] + 2*(G4UniformRand()-0.5)*angular_vector_total[i][3];  
                // std::cout << "Particle directed at detector index " << i << std::endl;  
                // std::cout << "Detector is at theta, phi: " << angular_vector_total[i][0]*(180/M_PI) << ", " 
                // << angular_vector_total[i][1]*(180/M_PI) << " with theta_max, phi_max: " 
                // << angular_vector_total[i][2]*(180/M_PI)  << ", " << angular_vector_total[i][3]*(180/M_PI) << std::endl;
                // std::cout << "Particle has polar and azimuthial angle of : " << polarAngle*(180/M_PI) << ", " 
                // << azimuthialAngle*(180/M_PI) << std::endl; 
                
                detector_counts[i] += 1;
            }
        }
  }
  
//   std::cout << "Random particle momentum in polar: Theta & Phi: " << polarAngle << " & " << azimuthialAngle << std::endl;
  
  G4double px = std::sin(polarAngle)*std::cos(azimuthialAngle); 
  G4double py = std::sin(polarAngle)*std::sin(azimuthialAngle); 
  G4double pz = std::cos(polarAngle);
  
  G4ThreeVector direction(px, py, pz); 
  
//   std::cout << "Random particle momentum in cartesian after roation are: x, y & z: " << direction.x() << ", "<< direction.y() << " & "<< direction.z() << std::endl;
  
  fParticleGun->SetParticleMomentumDirection(direction);  

  fParticleGun->SetParticleEnergy(662.*keV);

  std::cout << "" << std::endl; 
  for(int i = 0; i < int(detector_counts.size()); i++)
  {
      std::cout << "Number of particles directed at detector " << i << " is " << detector_counts[i] << std::endl;
  }
/*
 std::cout << "" << std::endl;
 std::cout << "---------------------------" << std::endl;
 std::cout << "" << std::endl;
*/

  fParticleGun->GeneratePrimaryVertex(anEvent);
} 

G4double B1PrimaryGeneratorAction::sumUpToIndex(const std::vector<G4double> list, int size, int index) {
    if (index < 0 || index >= size) {
        // Handle invalid index
        std::cerr << "Invalid index\n";
        return 0; // or some error value
    }
    
    G4double sum = 0;
    for (int i = 0; i <= index; ++i) 
    {
        sum += list[i]; 
    }
    return sum;
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
